# -------------------------------------
# common bash config
# -------------------------------------
export LC_ALL=en_US.UTF-8
export LESS='-i -M -R -W -q -S'
export LESSHISTSIZE=0
export EDITOR="nvim"
shopt -s histappend

export GOPATH="$HOME/ghq"
export DOT_FILES="$HOME/ghq/src/github.com/dty1er/dotfiles"
export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin:$DOT_FILES/google-cloud-sdk/bin:$DOT_FILES/fzf/bin
export XDG_CONFIG_HOME=$HOME/.config
export XDG_CACHE_HOME=$HOME/.cache
export XDG_DATA_HOME=$HOME/.local
export SECRETS=$HOME/.secrets
export CLOUDSDK_CONFIG=$DOT_FILES/gcloud
# export GIT_SSH_COMMAND='ssh -F $XDG_CONFIG_HOME/ssh/config -o UserKnownHostsFile=$XDG_CONFIG_HOME/ssh/known_hosts'

export SHELL_SESSION_HISTORY=0 # Disable bash_sessions on OSX
export HISTFILE=$XDG_CONFIG_HOME/bash/

export PATH=$PATH:$GOPATH/bin/nvim/bin
export PATH=$PATH:/usr/local/opt/llvm/bin/ # for clangd
export PATH="/usr/local/opt/mysql-client/bin:$PATH" # for MySQL client installed by brew

export FZF_DEFAULT_OPTS='--height 40% --border --bind ctrl-n:down,ctrl-p:up'

[ -e $XDG_CONFIG_HOME/scripts ] && for f in $XDG_CONFIG_HOME/scripts/*; do source $f; done
[ -e $SECRETS/profile.pvt ] && . $SECRETS/profile.pvt

# source <(stern --completion=bash)
source <(kubectl completion bash)

# -------------------------------------
# bind
# -------------------------------------

# necessary for history_get_from_datastore
bind '"\er": redraw-current-line'
bind '"\e^": history-expand-line'
bind '"\C-r": " \C-e\C-u\C-y\ey\C-u`history_get_from_datastore`\e\C-e\er\e^"'

# -------------------------------------
# functions
# -------------------------------------

function gcloud_account_pj() {
  echo $(gcloud config configurations list | grep True | awk '{print $3}')
}

function gcloud_pj() {
  echo $(gcloud config configurations list | grep True | awk '{print $4}')
}

function git_show_fzf() {
  while true
  do
    format="%C(red)%h%Creset %C(cyan)%cd%Creset %C(yellow)%N%Creset %C(green)%s%Creset %C(white)(%an)%Creset"
    commits=$(git log --date=iso --color=always --pretty=format:"$format" --abbrev-commit --reverse)
    commitline=$(echo "$commits" | fzf --tac +s +m --ansi --reverse)
    if [ $? != 0 ]; then
      break
    fi
    commitid=$(echo "$commitline" | awk '{print $1}')
    git show $commitid
  done
}

function fzf-rebase() {
  local commits commit
  format="%C(red)%h%Creset %C(cyan)%cd%Creset %C(yellow)%N%Creset %C(green)%s%Creset %C(white)(%an)%Creset"
  commits=$(git log --color=always --pretty=oneline --pretty=format:"$format" --abbrev-commit --reverse) &&
  commit=$(echo "$commits" | fzf --tac +s +m --ansi --reverse) &&
  echo -n $(echo "$commit" | sed "s/ .*//")
}

function ghq-cd-fzf {
  repo=`ghq list | fzf`
  if [ -n "$repo" ]; then
    cd $HOME/ghq/src/$repo
  fi
}

function export_kube_ctx() {
  export KUBE_CONTEXT=$(kubectl config get-contexts --no-headers --output='name' | fzf)
}

function kube_describe_pod() {
  kubectl --context="$KUBE_CONTEXT" -n="$KUBE_NAMESPACE" get pods -o wide --no-headers | fzf | awk '{print $1}' | xargs kubectl --context="$KUBE_CONTEXT" -n="$KUBE_NAMESPACE" describe pod 
}

function kube_logs_pod() {
  kubectl --context="$KUBE_CONTEXT" -n="$KUBE_NAMESPACE" get pods -o wide --no-headers | fzf | awk '{print $1}' | xargs kubectl --context="$KUBE_CONTEXT" -n="$KUBE_NAMESPACE" logs
}

function kube_port_forward() {
  kubectl --context="$KUBE_CONTEXT" -n="$KUBE_NAMESPACE" get pods -o wide --no-headers | fzf | awk '{print $1}' | xargs -I "{}" kubectl --context="$KUBE_CONTEXT" -n="$KUBE_NAMESPACE" port-forward {} $1
}

function history_get_from_datastore() {
  histdatastore get $(dirs +0) | fzf --no-sort --tac
}

function goget() {
  cat $XDG_CONFIG_HOME/packages/go | while read line
  do
    ghq list | grep $line || echo "installing ${line}..."; go get -u $line
  done
}

function ghqget() {
  ghq import -u --parallel < $XDG_CONFIG_HOME/packages/ghq
}

function ghqprivget() {
  ghq import -u --parallel < $SECRETS/ghq.private
}

function _go() {
  [ "$1" = "" ] && `which go` && return
  if [ "$1" != "get" ]; then
    `which go` $@
    return
  fi

  # go get *
  if [ "$2" = "-u" ]; then
    echo $3 >> $XDG_CONFIG_HOME/packages/go
  else
    echo $2 >> $XDG_CONFIG_HOME/packages/go
  fi
  f=`cat $XDG_CONFIG_HOME/packages/go | sort | uniq`
  echo "$f" > $XDG_CONFIG_HOME/packages/go
  `which go` $@
}

function _ghq() {
  [ "$1" = "" ] && `which ghq` && return
  [ "$1" != "get" ] && `which ghq` $@ && return
  echo $2 >> $XDG_CONFIG_HOME/packages/ghq
  f=`cat $XDG_CONFIG_HOME/packages/ghq | sort | uniq`
  echo "$f" > $XDG_CONFIG_HOME/packages/ghq
  `which ghq` $@
}

function go_test_fzf() {
  go test -timeout 30s -count=1 `go list ./... | fzf` -run "^(Test.*)$" -v | gotest
}

function add_hist() {
  (histdatastore put $(dirs +0) "$1" &)
}

function vifzf() {
  file=$(fzf)
  add_hist "vi $file"
  if [ -z $file ]; then
    return 0
  fi
  nvim $file
}

# -------------------------------------
# prompt
# -------------------------------------

# RED="\[\e[31m\]"
# GREEN="\[\e[32m\]"
# YELLOW="\[\e[33m\]"
# BLUE="\[\e[34m\]"
# MAGENTA="\[\e[35m\]"
# CYAN="\[\e[36m\]"
# RESET="\[\e[0m\]"

PS1='
(\[\e[32m\e[40m\]$KUBE_CONTEXT\[\e[0m\]:\[\e[32m\e[40m\]$KUBE_NAMESPACE\[\e[0m\])
(\[\e[33m\e[40m\]g\[\e[0m\] |\[\e[33m\e[40m\]$(gcloud_account)\[\e[0m\]:\[\e[33m\e[40m\]$(gcloud_pj)\[\e[0m\])
'
PS1=$PS1'\[\e[36m\e[40m\]\w\[\e[0m\]'
PS1=$PS1'\[\e[37m\e[40m\]$(__git_ps1 | sed -e "s/(//g" | sed -e "s/)//g")\[\e[0m\]'
PS1=$PS1'
\[\e[35m\e[40m\]‚ùØ\[\e[0m\] '

GIT_PS1_SHOWDIRTYSTATE=true
GIT_PS1_SHOWUNTRACKEDFILES=true
GIT_PS1_SHOWSTASHSTATE=false
GIT_PS1_SHOWUPSTREAM=

# -------------------------------------
# alias
# -------------------------------------

alias t='vifzf'
alias ls='ls -GF'
alias ll='ls -alh'
alias vi="nvim"
alias tmux="tmux -f $XDG_CONFIG_HOME/tmux/tmux.conf"
alias docker="docker --config $XDG_CONFIG_HOME/docker/"
alias dr="docker"
alias drc="docker-compose"
alias gc='git co $(git b | fzf | sed -e "s/\* //g" | awk "{print \$1}")'
alias gb='git b | fzf | xargs git branch -d'
alias gr='ghq-cd-fzf'
alias gf='git rbi $(fzf-rebase)'
alias gs='git_show_fzf'
alias de='docker exec -it $(docker ps | fzf | cut -d " " -f 1) /bin/bash'
alias ds='docker exec -it $(docker ps | fzf | cut -d " " -f 1) /bin/sh'
alias ap='export AWS_PROFILE=$(grep -iE "^[]+[^*]" ~/.aws/credentials | tr -d [| tr -d ] | fzf)'
alias tcpdump='sudo tcpdump -A -p -tttt -l -n -s 0' # https://gist.github.com/yagi5/7e106bcb79d6e52953dedb48417874c5
alias k='kubectl --context="$KUBE_CONTEXT" -n="$KUBE_NAMESPACE"'
alias gcf='gcloud_config_set_fzf'
alias kc='export_kube_ctx'
alias st='stern worker -o json -n $KUBE_NAMESPACE'
# alias ssh='ssh -F $XDG_CONFIG_HOME/ssh/config -o UserKnownHostsFile=$XDG_CONFIG_HOME/ssh/known_hosts'
alias go='_go'
alias ghq='_ghq'
alias docker_rmi_all='docker rmi --force $(docker images -qa)'
alias docker_rm_all='docker rm $(docker ps -a -q)'
alias gt='go_test_fzf'
alias jq='gojq'
alias kdp='kube_describe_pod'
alias klp='kube_logs_pod'
alias kfp='kube_port_forward'
alias tp='telepresence --namespace="$KUBE_NAMESPACE" --context="$KUBE_CONTEXT"'

# -------------------------------------
# preexec(https://github.com/rcaloras/bash-preexec)
# -------------------------------------

preexec() {
  (histdatastore put $(dirs +0) "$1" &)
}

precmd() { 
  : 
}

# -------------------------------------
# hist-datastore
# -------------------------------------

(cacheupdate &)
